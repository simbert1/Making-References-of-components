@inject IJSRuntime js

    <input type="checkbox" @bind="displayButtons" />
   <GenericList List="book">
       <ElementTemplate Context="book_">
           <IndividualBookList book=" book_ " DisplayButtons="displayButtons" DeleteBooks="DeleteBook"/>
       </ElementTemplate>
   </GenericList>
<Confirmation @ref="confirmation" onCancel="onCancel" onConfirm="onConfirm">
    <div>Do you wish to delete  @booksToBeDeleted.Tittle ?</div>
    </Confirmation>
@code {
    Confirmation confirmation;
    [Parameter] public List<Books> book { get; set; }
    [Parameter] public RenderFragment NullTemplate { get; set; }
    [Parameter] public RenderFragment EmptyTemplate { get; set; }
    bool displayButtons = false;
    Books booksToBeDeleted;
    private async Task DeleteBook(Books books)
    {
        booksToBeDeleted = books;
        confirmation.Show();
        // await js.MyFunction("custom message");
        //  var confirmed = await js.Confirm($"Are you sure you want to delete {books.Tittle } ?");
        // if (confirmed)
        // {
        //     book.Remove(books);
        //}


    }

    void onConfirm()
    {
        book.Remove(booksToBeDeleted);
        confirmation.Hide();
        booksToBeDeleted = null;
    }
    void onCancel()
    {
        confirmation.Hide();
        booksToBeDeleted = null;
    }
    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized. book.count =" + book.Count.ToString());
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet. book.count =" + book.Count.ToString());
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("OnAfterRender. firstrender =" + firstRender.ToString());
    }
    protected override bool ShouldRender()
    {
        return true;
    }
}
